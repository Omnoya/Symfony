<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
    public function getAdvertWithCategories(array $categoryNames){

        $qb = $this
            ->createQueryBuilder('a')
            ->innerJoin('a.categories', 'c', 'WITH', 'c.name = :categoryNames')
            ->setParameter('categoryNames', $categoryNames)
            ->addSelect('c')
            ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        //$qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function getAdverts($page, $nbPerPage){
        $query = $this
            ->createQueryBuilder('a') //SELECT * FROM Advert
            ->leftJoin('a.image', 'i' )
            ->addSelect('i')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;

        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page - 1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
        ;

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }
}


